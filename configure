#! /bin/sh

: ${CROSS_COMPILER:=}
: ${HOST_CC:=cc}
: ${CC:=${CROSS_COMPILER}cc}

: ${PKGCONFIG:=pkg-config}
: ${WARN_FLAGS_C:="-Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition -Wmissing-declarations -Wbad-function-cast"}
: ${WARN_FLAGS:="-Wall -Wundef -Wshadow -Wcast-align -Wwrite-strings ${WARN_FLAGS_C}"}
: ${GIT_VER:=$(git describe --dirty=+ --always --abbrev=0)}

# Given a series of flags for CC, echo (space seperated) the ones that the
# compiler is happy with.
cflag_x () {
	for i in "$@"; do
		${CC} ${CFLAGS:-} -c -x c "$i" /dev/null -o /dev/null >/dev/null 2>&1 && printf "%s " "$i" || true
	done
}

COMMON_FLAGS="$(cflag_x -fsanitize=address -flto -fsanitize=undefined -fvar-tracking-assignments)"
: ${CFLAGS:="${COMMON_FLAGS} -ggdb3 -Os"}

LIBS=libevdev
# FIXME: libevdev has bugs in it's headers and as a result requires
# no-strict-aliasing
LIB_CFLAGS="$(${PKGCONFIG} --cflags ${LIBS}) -fno-strict-aliasing -Iccan"
LIB_LDFLAGS="$(${PKGCONFIG} --libs ${LIBS}) -lev -lm"

CFLAGS="${WARN_FLAGS} -std=c99 -D_GNU_SOURCE ${CFLAGS}"
: ${HOST_CFLAGS:=${CFLAGS}}
CFLAGS="-DCFG_GIT_VERSION=${GIT_VER} ${LIB_CFLAGS} ${CFLAGS}"

: ${LDFLAGS:="${COMMON_FLAGS}"}
: ${HOST_LDFLAGS:=${LDFLAGS}}
LDFLAGS="${LIB_LDFLAGS} ${LDFLAGS}"

CONFIGURATOR_DIR="./ccan/tools/configurator"

exec >build.ninja


to_host () {
	for i in "$@"; do
		printf "%s " ".host/$i"
	done
}

cat <<EOF
cc = $CC
host_cc = $HOST_CC
objcopy = $OBJCOPY
host_cflags = $HOST_CFLAGS
cflags = $CFLAGS
ldflags = $LDFLAGS
host_ldflags = $HOST_LDFLAGS

rule cc
  command = \$cc \$cflags -MMD -MF \$out.d  -c \$in -o \$out
  depfile = \$out.d

rule ccld
  command = \$cc \$ldflags -o \$out \$in

rule host-ccld
  command = \$host_cc \$host_ldflags -o \$out \$in

rule config_h
  command = cd \$out_dir && ../$(to_host configurator) \$cc \$cflags > ../\$out

rule ninja_gen
  command = $0
  generator = yes
build build.ninja : ninja_gen $0

build $(to_host configurator) : ccld $CONFIGURATOR_DIR/configurator.c
  ldflags = \$host_ldflags \$host_cflags
  cc = \$host_cc
EOF

to_out () {
  for i in "$@"; do
    printf "%s " ".build-$out/$i"
  done
}

to_obj () {
  for i in "$@"; do
    printf "%s " ".build-$out/$i.o"
  done
}

_ev () {
	eval echo "\${$1}"
}

bin () {
	out="$1"
	shift
	out_var="${out/./_}"

	for s in "$@"; do
		echo "build $(to_obj "$s"): cc $s | $(to_out config.h)"
		echo "  cflags = \$cflags -I.build-$out"
	done

	cat <<EOF
build $(to_out config.h) : config_h | $(to_host configurator)
  out_dir = .build-$out
build $out : ccld $(to_obj "$@")
EOF
	BINS="$BINS $out"
}
BINS=""

bin illum-d   main-daemon.c ccan/ccan/pr_log/pr_log.c
bin illum-ctl main-ctl.c

echo default ${BINS}
